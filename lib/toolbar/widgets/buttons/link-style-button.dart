import 'dart:async';

import 'package:flutter/material.dart';

import '../../../controller/controllers/editor-controller.dart';
import '../../../document/controllers/document.controller.dart';
import '../../../editor/services/editor.service.dart';
import '../../../editor/services/run-build.service.dart';
import '../../../selection/services/selection.service.dart';
import '../../../shared/models/editor-dialog-theme.model.dart';
import '../../../shared/models/editor-icon-theme.model.dart';
import '../../../shared/state/editor-state-receiver.dart';
import '../../../shared/state/editor.state.dart';
import '../../../shared/translations/toolbar.i18n.dart';
import '../dialogs/link-style-dialog.dart';
import '../toolbar.dart';

// Adds links in the selected text
// ignore: must_be_immutable
class LinkStyleButton extends StatefulWidget with EditorStateReceiver {
  final EditorController controller;
  final IconData? icon;
  final double iconSize;
  final EditorIconThemeM? iconTheme;
  final EditorDialogThemeM? dialogTheme;
  final double buttonsSpacing;
  late EditorState _state;

  LinkStyleButton({
    required this.controller,
    required this.buttonsSpacing,
    this.iconSize = defaultIconSize,
    this.icon,
    this.iconTheme,
    this.dialogTheme,
    Key? key,
  }) : super(key: key) {
    controller.setStateInEditorStateReceiver(this);
  }

  @override
  _LinkStyleButtonState createState() => _LinkStyleButtonState();

  @override
  void cacheStateStore(EditorState state) {
    _state = state;
  }
}

class _LinkStyleButtonState extends State<LinkStyleButton> {
  late final EditorService _editorService;
  late final RunBuildService _runBuildService;
  late final SelectionService _selectionService;

  final GlobalKey _toolTipKey = GlobalKey();
  StreamSubscription? _runBuild$L;

  @override
  void initState() {
    _editorService = EditorService(widget._state);
    _runBuildService = RunBuildService(widget._state);
    _selectionService = SelectionService(widget._state);

    super.initState();
    _subscribeToRunBuild();
  }

  @override
  void dispose() {
    super.dispose();
    _runBuild$L?.cancel();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isToggled = _editorService.getSelectionLinkAttributeValue() != null;

    return GestureDetector(
      onTap: () async {
        final dynamic tooltip = _toolTipKey.currentState;
        tooltip.ensureTooltipVisible();
        Future.delayed(
          const Duration(seconds: 3),
          tooltip.deactivate,
        );
      },
      child: Tooltip(
        key: _toolTipKey,
        message: 'Please first select some text to transform into a link.'.i18n,
        child: IconBtn(
          highlightElevation: 0,
          hoverElevation: 0,
          buttonsSpacing: widget.buttonsSpacing,
          size: widget.iconSize * iconButtonFactor,
          icon: Icon(
            widget.icon ?? Icons.link,
            size: widget.iconSize,
            color: isToggled
                ? (widget.iconTheme?.iconSelectedColor ??
                    theme.primaryIconTheme.color)
                : (widget.iconTheme?.iconUnselectedColor ??
                    theme.iconTheme.color),
          ),
          fillColor: isToggled
              ? (widget.iconTheme?.iconSelectedFillColor ??
                  theme.colorScheme.secondary)
              : (widget.iconTheme?.iconUnselectedFillColor ??
                  theme.canvasColor),
          borderRadius: widget.iconTheme?.borderRadius ?? 2,
          onPressed: () => _openLinkDialog(context),
        ),
      ),
    );
  }

  @override
  void didUpdateWidget(covariant LinkStyleButton oldWidget) {
    super.didUpdateWidget(oldWidget);

    // If a new controller was generated by setState() in the parent
    // we need to subscribe to the new state store.
    if (oldWidget.controller != widget.controller) {
      _runBuild$L?.cancel();
      widget.controller.setStateInEditorStateReceiver(widget);
      _subscribeToRunBuild();
    }
  }

  // === PRIVATE ===

  void _subscribeToRunBuild() {
    _runBuild$L = _runBuildService.runBuild$.listen(
      (_) => setState(() {}),
    );
  }

  void _openLinkDialog(BuildContext context) {
    if(!_documentControllerInitialised) {
      return;
    }

    showDialog<dynamic>(
      context: context,
      builder: (ctx) {
        final link = _editorService.getSelectionLinkAttributeValue();
        final selection = _selectionService.selection;
        final index = selection.start;
        var text;

        if (link != null) {
          // Text should be the link's corresponding text, not selection
          final leaf = documentController?.queryNode(index).leaf;

          if (leaf != null) {
            text = leaf.toPlainText();
          }
        }

        final len = selection.end - index;
        text ??= len == 0 ? '' : documentController?.getPlainTextAtRange(index, len);

        return LinkStyleDialog(
          dialogTheme: widget.dialogTheme,
          link: link,
          text: text,
        );
      },
    ).then(
      (value) {
        if (value != null) _editorService.addLinkToSelection(value);
      },
    );
  }

  DocumentController? get documentController {
    return widget._state.refs.documentController;
  }

  bool get _documentControllerInitialised {
    return widget._state.refs.documentControllerInitialised == true;
  }
}
